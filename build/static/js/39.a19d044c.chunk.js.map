{"version":3,"sources":["MyApp/auth/login.js","MyApp/auth/userService.js"],"names":["Login","_useState","useState","_useState2","Object","C_MyData_FireBaseGoogle_mybestschool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","email","setEmail","_useState3","_useState4","password","setPassword","useEffect","firebase","auth","signOut","UserService","logout","resetInput","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_hoc_Aux__WEBPACK_IMPORTED_MODULE_8__","className","type","placeholder","value","onChange","e","target","onClick","signInWithEmailAndPassword","toLowerCase","then","currentUser","undefined","user","firestore","collection","where","get","querySnapshot","forEach","doc","userData","data","login","name","role","window","location","href","catch","error","console","log","err","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","to","__webpack_require__","d","__webpack_exports__","_firebase__WEBPACK_IMPORTED_MODULE_0__","uuid__WEBPACK_IMPORTED_MODULE_1__","localStorage","setItem","JSON","stringify","this","addLoginHistory","userDetail","getCurrentUser","removeItem","parse","getItem","getDisplayName","getCurrentRole","getIsCurrentAdminRole","pageNewItem","id","uuidv4","loginAt","FieldValue","serverTimestamp","lastUpdate","set"],"mappings":"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","file":"static/js/39.a19d044c.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport firebase from \"../../firebase\";\nimport './../../assets/scss/style.scss';\nimport { NavLink, } from 'react-router-dom';\nimport { getAuth, getRedirectResult, GoogleAuthProvider } from \"firebase/auth\";\nimport { AuthContext } from '../auth/auth';\nimport { UserService } from '../auth/userService';\nimport { useHistory } from 'react-router';\nimport Aux from \"../../hoc/_Aux\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n\n  useEffect(() => {\n    firebase.auth().signOut();\n    UserService.logout();\n  }, []);\n\n  const login = () => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email.toLowerCase(), password)\n      .then((currentUser) => {\n        resetInput();\n        if (currentUser.user != undefined && currentUser.user != null) {\n\n            firebase.firestore().collection('users').where(\"email\", \"==\", email.toLowerCase())\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach((doc) => { \n                    let userData = doc.data()\n                    UserService.login(userData.name, userData.email.toLowerCase(), userData.role);\n                    window.location.href = '/user/userdashboard';\n                });\n            })\n            .catch((error) => {\n                console.log(\"Error getting documents: \", error);\n            });\n\n          \n\n        //   let usersDBQuery = firebase.firestore().collection('users').where('email', '==', email)\n        //   usersDBQuery.get()\n        //     .then(snapshot => {\n        //       if (snapshot.exists) {\n               \n        //       }\n        //     })\n         }\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const logOut = () => {\n    firebase.auth().signOut();\n    UserService.logout();\n  };\n\n  const resetInput = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  return (\n    <Aux>\n\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-content\">\n          <div className=\"auth-bg\">\n            <span className=\"r\" />\n            <span className=\"r s\" />\n            <span className=\"r s\" />\n            <span className=\"r\" />\n          </div>\n          <div className=\"card\">\n            <div className=\"card-body text-center\">\n              <div className=\"mb-4\">\n                <i className=\"feather icon-unlock auth-icon\" />\n              </div>\n              <h3 className=\"mb-4\">Login</h3>\n              <div className=\"input-group mb-3\">\n                <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n              </div>\n              <div className=\"input-group mb-4\">\n                <input type=\"password\" className=\"form-control\" placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n              </div>\n\n              <button className=\"btn btn-primary shadow-2 mb-4\" onClick={login}>Login</button>\n              {/* <p className=\"mb-2 text-muted\">Forgot password? <NavLink to=\"/auth/reset-password-1\">Reset</NavLink></p> */}\n              <p className=\"mb-0 text-muted\">Donâ€™t have an account? <NavLink to=\"/auth/register\">Signup</NavLink></p>\n            </div>\n          </div>\n        </div>\n      </div> \n    </Aux>\n  );\n};\n\nexport default Login;\n\n\n\n\n    // var provider = new firebase.auth.GoogleAuthProvider();\n    // provider.addScope('profile');\n    // provider.addScope('email');\n    // //provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n    // firebase.auth().signInWithPopup(provider).then(function (result) {\n    //   // This gives you a Google Access Token. You can use it to access the Google API.\n    //   var token = result.credential.accessToken;\n    //   // The signed-in user info.\n    //   var user = result.user;\n    //   // [START_EXCLUDE]\n    //   document.getElementById('quickstart-oauthtoken').textContent = token;\n    //   // [END_EXCLUDE]\n    // }).catch(function (error) {\n    //   // Handle Errors here.\n    //   var errorCode = error.code;\n    //   var errorMessage = error.message;\n    //   // The email of the user's account used.\n    //   var email = error.email;\n    //   // The firebase.auth.AuthCredential type that was used.\n    //   var credential = error.credential;\n    //   // [START_EXCLUDE]\n    //   if (errorCode === 'auth/account-exists-with-different-credential') {\n    //     alert('You have already signed up with a different auth provider for that email.');\n    //     // If you are using multiple auth providers on your app you should handle linking\n    //     // the user's accounts here.\n    //   } else {\n    //     console.error(error);\n    //   }\n    //   // [END_EXCLUDE]\n    // });\n\n\n"," \nimport firebase from \"../../firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const UserService = {\n    login,\n    logout,\n    getCurrentUser,\n    getDisplayName,\n    getCurrentRole,\n    getIsCurrentAdminRole,\n    addLoginHistory\n};\n \nfunction login(name, email, role) { \n    //user.authdata = window.btoa(username + ':' + password);\n    localStorage.setItem('user', JSON.stringify({name: name, email: email, role : role }));\n    this.addLoginHistory(name, email, 'LogIn');\n } \n \n function logout() {\n    // remove user from local storage to log user out\n    const userDetail = this.getCurrentUser();\n    if(userDetail) {\n        this.addLoginHistory(userDetail.name, userDetail.email, 'LogOut');\n    }    \n    localStorage.removeItem('user');    \n}\n\nfunction getCurrentUser() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    return user;\n}\n\nfunction getCurrentRole() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    return user != null ? user.role : \"\" ;\n}\n\nfunction getIsCurrentAdminRole(role) {\n    let user = JSON.parse(localStorage.getItem('user'));\n    return user && user.role == role;\n}\n\nfunction getDisplayName() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    return user != null ? user.name : \"\" ;\n}\n\nfunction addLoginHistory(name, email, type) {\n    const pageNewItem = {\n        id: uuidv4(),\n        name,       \n        email,\n        type,\n        loginAt: firebase.firestore.FieldValue.serverTimestamp(),\n        lastUpdate: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n     \n    firebase.firestore().collection('loginhistory').doc(pageNewItem.id)\n        .set(pageNewItem)\n        .catch((err) => {\n            console.error(err);\n        }); \n}\n\n "],"sourceRoot":""}
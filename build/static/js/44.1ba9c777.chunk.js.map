{"version":3,"sources":["MyApp/questions/CheckAndUncheck.js"],"names":["CheckAndUncheck","_useState","useState","_useState2","Object","C_MyData_FireBaseGoogle_mybestschool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","stateChecked","setStateChecked","handleChange","evt","target","checked","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","onClick","e","type","onChange","defaultProps"],"mappings":"8HAEA,SAASA,IAAkB,IAAAC,EAEiBC,oBAAS,GAF1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhBK,EAFgBH,EAAA,GAEFI,EAFEJ,EAAA,GAczB,SAASK,EAAaC,GAChBH,IAAiBG,EAAIC,OAAOC,SAC5BJ,EAAgBE,EAAIC,OAAOC,SAK/B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,SAACC,GAjBpBT,GAAgB,KAiBd,SADF,iBACwEK,EAAAC,EAAAC,cAAA,UACtEC,QAAS,SAACC,GAdfT,GAAgB,KAa2D,YAGxEK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,0BACcF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWN,QAASL,EAAcY,SAAU,SAACF,GAAD,OAAOR,EAAaQ,OAE1FJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BACkBF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,QAAQN,QAASL,EAAcY,SAAU,SAACF,GAAD,OAAOR,EAAaQ,QAUnGhB,EAAgBmB,aAAe,GAGhBnB","file":"static/js/44.1ba9c777.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment, useContext } from \"react\";\n\nfunction CheckAndUncheck() {\n\n    const [stateChecked, setStateChecked] = useState(false);\n \n\n\n    function checkIt() {\n        setStateChecked(true);\n  }\n\n  function unCheckIt() {\n     setStateChecked(false);\n  }\n\n  function handleChange(evt) {\n     if(stateChecked !== evt.target.checked) {\n        setStateChecked(evt.target.checked);\n     }\n  }\n\n \n    return (\n      <div>\n        <div>\n          <button onClick={(e) => checkIt(e)}>Check</button> &nbsp;&nbsp;&nbsp; <button \n          onClick={(e) =>unCheckIt(e)}>Uncheck</button>\n        </div>\n        <br/>\n        <div>\n          Checkbox :: <input type=\"checkbox\" checked={stateChecked} onChange={(e) => handleChange(e)}/>\n        </div>\n        <br/>\n        <div>\n          Radio button :: <input type=\"radio\" checked={stateChecked} onChange={(e) => handleChange(e)}/>\n        </div>\n      </div>\n    );\n  }\n \n\nCheckAndUncheck.propTypes = {\n}\n\nCheckAndUncheck.defaultProps = {\n}\n\nexport default CheckAndUncheck;"],"sourceRoot":""}